// Generated by CoffeeScript 1.6.3
(function() {
  var expect, state,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  expect = require('chai').expect;

  state = require('state');

  describe("Guards:", function() {
    describe("a state guard", function() {
      it("resolves across superstates", function() {
        var o;
        state(o = {}, 'abstract', {
          A: state('initial', {
            admit: function(fromState) {
              return false;
            },
            AA: state,
            AB: state({
              admit: 'AA'
            }),
            AC: state
          }),
          B: state({
            admit: 'A.*',
            release: {
              '.*': function(toState) {
                return true;
              }
            },
            BA: state
          })
        });
        o.state('-> AA');
        o.state('-> A');
        expect(o.state().name).to.equal('AA');
        o.state('-> AB');
        expect(o.state().name).to.equal('AB');
        o.state('-> B');
        expect(o.state().name).to.equal('B');
        o.state('-> AC');
        expect(o.state().name).to.equal('B');
        o.state('-> BA');
        expect(o.state().name).to.equal('BA');
        o.state('-> A');
        return expect(o.state().name).to.equal('BA');
      });
      return it("resolves across protostates", function() {
        var Class, Superclass, o, _ref;
        Superclass = (function() {
          function Superclass() {}

          state(Superclass.prototype, 'abstract', {
            A: state('initial', {
              admit: function(fromState) {
                return false;
              }
            }),
            B: state({
              release: function(toState) {
                if (toState.name === 'D') {
                  return true;
                }
              }
            }),
            C: state,
            D: state
          });

          return Superclass;

        })();
        Class = (function(_super) {
          __extends(Class, _super);

          function Class() {
            _ref = Class.__super__.constructor.apply(this, arguments);
            return _ref;
          }

          return Class;

        })(Superclass);
        o = new Class;
        o.state('-> B');
        expect(o.state().name).to.equal('B');
        o.state('-> A');
        expect(o.state().name).to.equal('B');
        o.state('-> C');
        expect(o.state().name).to.equal('B');
        o.state('-> D');
        expect(o.state().name).to.equal('D');
        o.state('-> A');
        return expect(o.state().name).to.equal('D');
      });
    });
    return 0 && describe("a transition guard", function() {
      return it("", function() {
        var o;
        o = {
          data: []
        };
        return state(o, 'abstract', {
          A: state('default initial'),
          B: state,
          C: state,
          transitions: {
            X: {
              origin: 'A',
              target: 'B',
              admit: function() {
                return true;
              }
            },
            Y: {
              origin: 'B',
              target: '*',
              admit: function() {
                return true;
              }
            }
          }
        });
      });
    });
  });

}).call(this);
