// Generated by CoffeeScript 1.6.3
(function() {
  var O, RootState, State, env, expect, state, _ref;

  _ref = state = require('state'), O = _ref.O, env = _ref.env, State = _ref.State, RootState = _ref.RootState;

  expect = require('chai').expect;

  describe("State::mutate", function() {
    var NIL, unit;
    NIL = O.NIL;
    unit = {
      expression: state('mutable'),
      mutations: [
        {
          A: state('initial'),
          B: state('abstract')
        }, {
          A: {
            AA: state
          },
          B: state({
            BA: state,
            BB: state('default')
          })
        }, {
          A: {
            AA: {
              m: function() {
                return 'A.AA';
              }
            }
          },
          B: {
            m: function() {
              return 'B';
            }
          }
        }, {
          A: {
            data: {
              a: 42
            }
          }
        }, {
          A: {
            data: {
              a: NIL
            }
          }
        }, {
          states: {
            A: NIL,
            B: NIL
          }
        }
      ],
      expectations: [
        function(o) {
          return o.state('A') && o.state('A').isInitial() && o.state('B');
        }, function(o) {
          return o.state('A') && o.state('A.AA') && o.state('B') && o.state('B').isAbstract() && o.state('B.BA') && o.state('B.BB') && o.state('B.BB').isDefault();
        }, function(o) {
          return o.state('A.AA').method('m') && o.state('B').method('m');
        }, function(o) {
          var _ref1;
          return ((_ref1 = o.state('A')) != null ? _ref1.has('a') : void 0) && o.state('A').get('a') === 42;
        }, function(o) {
          var _ref1;
          return ((_ref1 = o.state('A')) != null ? _ref1.has('a') : void 0) === false;
        }, function(o) {
          return (o.state('') != null) && (o.state('A') == null) && (o.state('B') == null);
        }
      ]
    };
    return describe("a virtual state", function() {
      var Class, o;
      o = {};
      state(o, unit.expression);
      unit.mutations.forEach(function(mutation, index) {
        return it("performed mutation " + index + " properly", function() {
          o.state('').mutate(mutation);
          return expect(unit.expectations[index](o)).to.be.ok;
        });
      });
      Class = (function() {
        function Class() {}

        state(Class.prototype, {
          A: state('mutable'),
          B: state,
          C: state('immutable')
        });

        return Class;

      })();
      it("is automatically realized if mutable", function() {
        o = new Class;
        o.state('-> A');
        expect(o.state().isVirtual()).to.equal(true);
        o.state().mutate({
          method: function() {
            return 'heyo';
          }
        });
        expect(o.state().isVirtual()).to.equal(false);
        return expect(typeof o.method === "function" ? o.method() : void 0).to.equal('heyo');
      });
      it("is auto-realized but not mutated if weak-immutable", function() {
        o = new Class;
        o.state('-> B');
        expect(o.state().isVirtual()).to.equal(true);
        o.state().mutate({
          method: function() {
            return 'heyo';
          }
        });
        expect(o.state().isVirtual()).to.equal(false);
        return expect(o.method != null).to.equal(false);
      });
      return it("is not automatically realized if strong-immutable", function() {
        o = new Class;
        o.state('-> C');
        expect(o.state().isVirtual()).to.equal(true);
        o.state().mutate({
          method: function() {
            return 'heyo';
          }
        });
        expect(o.state().isVirtual()).to.equal(true);
        return expect(o.method != null).to.equal(false);
      });
    });
  });

}).call(this);
