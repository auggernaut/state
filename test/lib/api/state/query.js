// Generated by CoffeeScript 1.6.3
(function() {
  var TRAVERSAL_FLAGS, VIA_ALL, VIA_NONE, VIA_PROTO, VIA_SUB, VIA_SUPER, VIA_VIRTUAL, expect, state,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  expect = require('chai').expect;

  state = require('state');

  TRAVERSAL_FLAGS = state.TRAVERSAL_FLAGS;

  VIA_NONE = TRAVERSAL_FLAGS.VIA_NONE, VIA_SUB = TRAVERSAL_FLAGS.VIA_SUB, VIA_SUPER = TRAVERSAL_FLAGS.VIA_SUPER, VIA_PROTO = TRAVERSAL_FLAGS.VIA_PROTO, VIA_VIRTUAL = TRAVERSAL_FLAGS.VIA_VIRTUAL, VIA_ALL = TRAVERSAL_FLAGS.VIA_ALL;

  describe("State::query", function() {
    var Class, Superclass, _ref;
    Superclass = (function() {
      function Superclass() {}

      state(Superclass.prototype, 'abstract', {
        A: state('default initial'),
        B: state
      });

      return Superclass;

    })();
    Class = (function(_super) {
      __extends(Class, _super);

      function Class() {
        _ref = Class.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      state(Class.prototype, {
        A: state({
          AA: state,
          AB: state
        })
      });

      return Class;

    })(Superclass);
    it("queries virtual states", function() {
      var o;
      o = new Class;
      expect(o.state('A').owner).to.equal(o);
      expect(o.state('A')).to.equal(o.state());
      return expect(o.state().isVirtual()).to.equal(true);
    });
    it("matches virtual states", function() {
      var o, root;
      o = new Class;
      root = o.state().root;
      expect(root.query('A', o.state())).to.equal(true);
      o.state('-> AA');
      return expect(root.query('AA', o.state())).to.equal(true);
    });
    it("queries and matches against prototypal states", function() {
      var A, o;
      o = new Class;
      A = o.state();
      expect(A.query('AB')).to.equal(Class.prototype.state('AB'));
      expect(A.query('B')).to.equal(Superclass.prototype.state('B'));
      expect(A.query('AB', Class.prototype.state('AB'))).to.equal(true);
      return expect(A.query('B', Superclass.prototype.state('B'))).to.equal(true);
    });
    it("recognizes virtual states in inclusion test", function() {
      var o, root;
      o = new Class;
      root = o.state().root;
      expect(root.query('*', o.state())).to.equal(true);
      o.state('-> AA');
      expect(root.query('*', o.state())).to.equal(false);
      return expect(root.query('**', o.state())).to.equal(true);
    });
    it("resolves the absolute single wildcard selector", function() {
      var list, o, path, set;
      o = new Class;
      list = ((function() {
        var _results;
        _results = [];
        for (path in Superclass.prototype.state('*')) {
          _results.push(path);
        }
        return _results;
      })()).join(' ');
      expect(list).to.equal("A B");
      list = ((function() {
        var _results;
        _results = [];
        for (path in Class.prototype.state('*')) {
          _results.push(path);
        }
        return _results;
      })()).join(' ');
      expect(list).to.equal("A");
      set = (function() {
        var _results;
        _results = [];
        for (path in o.state('*')) {
          _results.push(path);
        }
        return _results;
      })();
      list = set.join(' ');
      expect(set).to.have.length(0);
      return expect(list).to.equal("");
    });
    it("resolves the absolute double wildcard selector", function() {
      var list, o, path, set;
      o = new Class;
      list = ((function() {
        var _results;
        _results = [];
        for (path in Superclass.prototype.state('**')) {
          _results.push(path);
        }
        return _results;
      })()).join(' ');
      expect(list).to.equal("A B");
      list = ((function() {
        var _results;
        _results = [];
        for (path in Class.prototype.state('**')) {
          _results.push(path);
        }
        return _results;
      })()).join(' ');
      expect(list).to.equal("A A.AA A.AB");
      set = (function() {
        var _results;
        _results = [];
        for (path in o.state('**')) {
          _results.push(path);
        }
        return _results;
      })();
      list = set.join(' ');
      expect(set).to.have.length(0);
      return expect(list).to.equal("");
    });
    return it("resolves the absolute triple wildcard selector", function() {
      var list, o, path, set;
      o = new Class;
      list = ((function() {
        var _results;
        _results = [];
        for (path in Superclass.prototype.state('***')) {
          _results.push(path);
        }
        return _results;
      })()).join(' ');
      expect(list).to.equal(" A B");
      list = ((function() {
        var _results;
        _results = [];
        for (path in Class.prototype.state('***')) {
          _results.push(path);
        }
        return _results;
      })()).join(' ');
      expect(list).to.equal(" A A.AA A.AB");
      set = (function() {
        var _results;
        _results = [];
        for (path in o.state('***')) {
          _results.push(path);
        }
        return _results;
      })();
      list = set.join(' ');
      expect(set).to.have.length(1);
      return expect(list).to.equal("");
    });
  });

}).call(this);
