// Generated by CoffeeScript 1.6.3
(function() {
  var TRAVERSAL_FLAGS, VIA_ALL, VIA_NONE, VIA_PROTO, VIA_SUB, VIA_SUPER, VIA_VIRTUAL, expect, state,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  expect = require('chai').expect;

  state = require('state');

  TRAVERSAL_FLAGS = state.TRAVERSAL_FLAGS;

  VIA_NONE = TRAVERSAL_FLAGS.VIA_NONE, VIA_SUB = TRAVERSAL_FLAGS.VIA_SUB, VIA_SUPER = TRAVERSAL_FLAGS.VIA_SUPER, VIA_PROTO = TRAVERSAL_FLAGS.VIA_PROTO, VIA_VIRTUAL = TRAVERSAL_FLAGS.VIA_VIRTUAL, VIA_ALL = TRAVERSAL_FLAGS.VIA_ALL;

  describe("State::substates", function() {
    var Class, Superclass, _ref;
    Superclass = (function() {
      function Superclass() {}

      state(Superclass.prototype, 'abstract', {
        A: state('default initial'),
        B: state({
          BA: state({
            BAA: state,
            BAB: state
          }),
          BB: state
        }),
        C: state
      });

      return Superclass;

    })();
    Class = (function(_super) {
      __extends(Class, _super);

      function Class() {
        _ref = Class.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      state(Class.prototype, {
        A: state({
          AA: state('initial'),
          AB: state
        })
      });

      return Class;

    })(Superclass);
    it("returns an empty set when called with no args", function() {
      var o, set;
      o = new Class;
      set = o.state('').substates();
      return expect(set).to.be.empty;
    });
    it("includes all descendants", function() {
      var list, path, set, _i, _len, _results;
      set = Superclass.prototype.state('').substates(VIA_SUB);
      list = "A B B.BA B.BA.BAA B.BA.BAB B.BB C".split(' ');
      expect((function() {
        var _results;
        _results = [];
        for (path in set) {
          _results.push(path);
        }
        return _results;
      })()).to.have.length(list.length);
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        path = list[_i];
        _results.push(expect(set[path]).to.exist);
      }
      return _results;
    });
    it("includes all descendants inherited via protostate", function() {
      var list, path, set, _i, _len, _results;
      set = Class.prototype.state('').substates(VIA_SUB | VIA_PROTO);
      list = "A A.AA A.AB B B.BA B.BA.BAA B.BA.BAB B.BB C".split(' ');
      expect((function() {
        var _results;
        _results = [];
        for (path in set) {
          _results.push(path);
        }
        return _results;
      })()).to.have.length(list.length);
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        path = list[_i];
        _results.push(expect(set[path]).to.exist);
      }
      return _results;
    });
    it("includes virtual states", function() {
      var list, o, path, set, _i, _len, _results;
      o = new Class;
      set = o.state('').substates(VIA_VIRTUAL | VIA_SUB);
      list = "A A.AA".split(' ');
      expect((function() {
        var _results;
        _results = [];
        for (path in set) {
          _results.push(path);
        }
        return _results;
      })()).to.have.length(list.length);
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        path = list[_i];
        _results.push(expect(set[path]).to.exist);
      }
      return _results;
    });
    it("returns virtual states and all descendants of protostates", function() {
      var list, o, path, set, _i, _len;
      o = new Class;
      set = o.state('').substates(VIA_ALL);
      list = "A A.AA A.AB B B.BA B.BA.BAA B.BA.BAB B.BB C".split(' ');
      expect((function() {
        var _results;
        _results = [];
        for (path in set) {
          _results.push(path);
        }
        return _results;
      })()).to.have.length(list.length);
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        path = list[_i];
        expect(set[path]).to.exist;
      }
      expect(set['A'].isVirtual()).to.equal(true);
      expect(set['A.AA'].isVirtual()).to.equal(true);
      return expect(set['A.AB'].isVirtual()).to.equal(false);
    });
    return it("does not specify order", function() {});
  });

}).call(this);
