// Generated by CoffeeScript 1.6.3
(function() {
  var log, now, state;

  state = require('state');

  log = function() {
    return console.log.apply(console, arguments);
  };

  now = (typeof performance !== "undefined" && performance !== null ? performance.now : void 0) != null ? function() {
    return performance.now();
  } : function() {
    var frac, int, _ref;
    _ref = process.hrtime(), int = _ref[0], frac = _ref[1];
    return int + 1e-9 * frac;
  };

  0 && describe.only("Perf:", function() {
    var n, results,
      _this = this;
    n = 1000;
    results = {
      creation: {},
      invocation: {}
    };
    (function() {
      var Class, i, o, t, _i;
      Class = (function() {
        function Class() {}

        Class.prototype.m = function() {
          return 1;
        };

        return Class;

      })();
      t = now();
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        o = new Class;
      }
      return results.creation.stateless = now() - t;
    })();
    (function() {
      var Class, i, o, t, _i;
      Class = (function() {
        function Class() {}

        return Class;

      })();
      t = now();
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        state(o = new Class, {
          A: {
            m: function() {
              return 1;
            }
          }
        });
      }
      return results.creation.stateful_ = now() - t;
    })();
    (function() {
      var Class, i, o, t, _i;
      Class = (function() {
        function Class() {}

        state(Class.prototype, {
          A: {
            m: function() {
              return 1;
            }
          }
        });

        return Class;

      })();
      t = now();
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        o = new Class;
        o.state();
      }
      return results.creation.inherited = now() - t;
    })();
    (function() {
      var Class, i, o, t, _i;
      Class = (function() {
        function Class() {}

        Class.prototype.m = function() {
          return 1;
        };

        return Class;

      })();
      o = new Class;
      t = now();
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        o.m();
      }
      return results.invocation.stateless = now() - t;
    })();
    (function() {
      var Class, i, o, t, _i;
      Class = (function() {
        function Class() {}

        state(Class.prototype, {
          A: state('initial', {
            m: function() {
              return 1;
            }
          })
        });

        return Class;

      })();
      o = new Class;
      t = now();
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        o.m();
      }
      return results.invocation.inherited = now() - t;
    })();
    (function() {
      var Class, i, o, t, _i;
      Class = (function() {
        function Class() {}

        state(Class.prototype, {
          A: state('initial', {
            m: function() {
              return 1;
            }
          })
        });

        return Class;

      })();
      o = new Class;
      t = now();
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        o.m();
      }
      return results.invocation.hotcode__ = now() - t;
    })();
    (function() {
      var Class, i, o, t, _i;
      Class = (function() {
        function Class() {}

        state(Class.prototype, {
          A: state('initial', {
            m: function() {
              return 1;
            }
          })
        });

        return Class;

      })();
      o = new Class;
      t = now();
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        o.m();
      }
      return results.invocation.hotcode_2 = now() - t;
    })();
    return log(results);
  });

}).call(this);
